//
// Created by Mina on 18.05.2020.
//

#ifndef UMGEKEHRTER_POLE_CPP_STACK_HPP
#define UMGEKEHRTER_POLE_CPP_STACK_HPP

#include <vector>
#include <iostream>

template <typename T>
class Stack {
private:
// ----------------------------------------------------------------------------------------------------
// ---------------------------------------- private attributes ----------------------------------------
// ----------------------------------------------------------------------------------------------------
    std::vector<T> _values;

// ----------------------------------------------------------------------------------------------------
// ----------------------------------- private methods declaration ------------------------------------
// ----------------------------------------------------------------------------------------------------
    bool is_empty();
    
    bool has_only_one_element();
    
// ----------------------------------------------------------------------------------------------------
// ------------------------------- private static methods declaration ---------------------------------
// ----------------------------------------------------------------------------------------------------
public:
// ----------------------------------------------------------------------------------------------------
// ------------------------------------ public methods declaration ------------------------------------
// ----------------------------------------------------------------------------------------------------
    ~Stack();

    void push(T val);
    
    T top();
    
    T pop();

    void print_current_stack();

// ----------------------------------------------------------------------------------------------------
// -------------------------------- public static methods declaration ---------------------------------
// ----------------------------------------------------------------------------------------------------
};
// ----------------------------------------------------------------------------------------------------
// ------------------------------------ private methods definition ------------------------------------
// ----------------------------------------------------------------------------------------------------

template <typename T>
bool Stack<T>::is_empty() {
    return _values.size() == 0;
}

template <typename T>
bool Stack<T>::has_only_one_element() {
    return _values.size() == 1;
}

// ----------------------------------------------------------------------------------------------------
// -------------------------------- private static methods definition ---------------------------------
// ----------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------
// ------------------------------------ public methods definition -------------------------------------
// ----------------------------------------------------------------------------------------------------

template <typename T>
Stack<T>::~Stack() {
    _values.clear();
}

template <typename T>
void Stack<T>::push(T val) {
    _values.push_back(val);
}

template <typename T>
T Stack<T>::top() {
    //return _values. //TODO: continue here
}

template <typename T>
T Stack<T>::pop() {

}

template <typename T>
void Stack<T>::print_current_stack() {
    for (T& val : _values) {
        std::cout << val << ", ";
    }
}

// ----------------------------------------------------------------------------------------------------
// --------------------------------- public static methods definition ---------------------------------
// ----------------------------------------------------------------------------------------------------


#endif //UMGEKEHRTER_POLE_CPP_STACK_HPP